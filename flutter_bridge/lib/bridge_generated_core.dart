// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class DptpCoreSdk {
  Future<void> initializeOrders(
      {required String asks, required String bids, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeOrdersConstMeta;

  Future<void> newPairOrderCompute(
      {required String pairSymbol,
      required String collateralLongToken,
      required String collateralShortToken,
      required String leverage,
      required String maxNotional,
      required String minQuantityBase,
      required String marginRatio,
      required String takerFee,
      required String makerFee,
      required int baseTokenPrecision,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewPairOrderComputeConstMeta;

  Future<void> changeLeverage(
      {required String newLeverage, required String maxNotional, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangeLeverageConstMeta;

  Future<String> getActivePair({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetActivePairConstMeta;

  Future<void> changeActivePair({required String newActivePair, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangeActivePairConstMeta;

  Future<void> checkPairExists({required String newActivePair, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckPairExistsConstMeta;

  Future<void> updateBalance(
      {required String token, required String balance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateBalanceConstMeta;

  Future<String> computeOpenOrder(
      {required String payToken,
      required String payAmount,
      String? limitPrice,
      required String quantity,
      required bool isQuote,
      required bool isBuy,
      required bool usePercentage,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kComputeOpenOrderConstMeta;

  Future<String> getOrderBookManager({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetOrderBookManagerConstMeta;
}

class DptpCoreSdkImpl extends FlutterRustBridgeBase<DptpCoreSdkWire>
    implements DptpCoreSdk {
  factory DptpCoreSdkImpl(ffi.DynamicLibrary dylib) =>
      DptpCoreSdkImpl.raw(DptpCoreSdkWire(dylib));

  DptpCoreSdkImpl.raw(DptpCoreSdkWire inner) : super(inner);

  Future<void> initializeOrders(
          {required String asks, required String bids, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_initialize_orders(
            port_, _api2wire_String(asks), _api2wire_String(bids)),
        parseSuccessData: _wire2api_unit,
        constMeta: kInitializeOrdersConstMeta,
        argValues: [asks, bids],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitializeOrdersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize_orders",
        argNames: ["asks", "bids"],
      );

  Future<void> newPairOrderCompute(
          {required String pairSymbol,
          required String collateralLongToken,
          required String collateralShortToken,
          required String leverage,
          required String maxNotional,
          required String minQuantityBase,
          required String marginRatio,
          required String takerFee,
          required String makerFee,
          required int baseTokenPrecision,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_new_pair_order_compute(
            port_,
            _api2wire_String(pairSymbol),
            _api2wire_String(collateralLongToken),
            _api2wire_String(collateralShortToken),
            _api2wire_String(leverage),
            _api2wire_String(maxNotional),
            _api2wire_String(minQuantityBase),
            _api2wire_String(marginRatio),
            _api2wire_String(takerFee),
            _api2wire_String(makerFee),
            _api2wire_u32(baseTokenPrecision)),
        parseSuccessData: _wire2api_unit,
        constMeta: kNewPairOrderComputeConstMeta,
        argValues: [
          pairSymbol,
          collateralLongToken,
          collateralShortToken,
          leverage,
          maxNotional,
          minQuantityBase,
          marginRatio,
          takerFee,
          makerFee,
          baseTokenPrecision
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kNewPairOrderComputeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_pair_order_compute",
        argNames: [
          "pairSymbol",
          "collateralLongToken",
          "collateralShortToken",
          "leverage",
          "maxNotional",
          "minQuantityBase",
          "marginRatio",
          "takerFee",
          "makerFee",
          "baseTokenPrecision"
        ],
      );

  Future<void> changeLeverage(
          {required String newLeverage,
          required String maxNotional,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_change_leverage(port_,
            _api2wire_String(newLeverage), _api2wire_String(maxNotional)),
        parseSuccessData: _wire2api_unit,
        constMeta: kChangeLeverageConstMeta,
        argValues: [newLeverage, maxNotional],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kChangeLeverageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_leverage",
        argNames: ["newLeverage", "maxNotional"],
      );

  Future<String> getActivePair({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_active_pair(port_),
        parseSuccessData: _wire2api_String,
        constMeta: kGetActivePairConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetActivePairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_active_pair",
        argNames: [],
      );

  Future<void> changeActivePair(
          {required String newActivePair, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_change_active_pair(
            port_, _api2wire_String(newActivePair)),
        parseSuccessData: _wire2api_unit,
        constMeta: kChangeActivePairConstMeta,
        argValues: [newActivePair],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kChangeActivePairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_active_pair",
        argNames: ["newActivePair"],
      );

  Future<void> checkPairExists({required String newActivePair, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_check_pair_exists(
            port_, _api2wire_String(newActivePair)),
        parseSuccessData: _wire2api_unit,
        constMeta: kCheckPairExistsConstMeta,
        argValues: [newActivePair],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCheckPairExistsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "check_pair_exists",
        argNames: ["newActivePair"],
      );

  Future<void> updateBalance(
          {required String token, required String balance, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_update_balance(
            port_, _api2wire_String(token), _api2wire_String(balance)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUpdateBalanceConstMeta,
        argValues: [token, balance],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUpdateBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_balance",
        argNames: ["token", "balance"],
      );

  Future<String> computeOpenOrder(
          {required String payToken,
          required String payAmount,
          String? limitPrice,
          required String quantity,
          required bool isQuote,
          required bool isBuy,
          required bool usePercentage,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_compute_open_order(
            port_,
            _api2wire_String(payToken),
            _api2wire_String(payAmount),
            _api2wire_opt_String(limitPrice),
            _api2wire_String(quantity),
            isQuote,
            isBuy,
            usePercentage),
        parseSuccessData: _wire2api_String,
        constMeta: kComputeOpenOrderConstMeta,
        argValues: [
          payToken,
          payAmount,
          limitPrice,
          quantity,
          isQuote,
          isBuy,
          usePercentage
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kComputeOpenOrderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compute_open_order",
        argNames: [
          "payToken",
          "payAmount",
          "limitPrice",
          "quantity",
          "isQuote",
          "isBuy",
          "usePercentage"
        ],
      );

  Future<String> getOrderBookManager({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_order_book_manager(port_),
        parseSuccessData: _wire2api_String,
        constMeta: kGetOrderBookManagerConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetOrderBookManagerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_order_book_manager",
        argNames: [],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_bool(bool raw) {
    return raw ? 1 : 0;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : _api2wire_String(raw);
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class DptpCoreSdkWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DptpCoreSdkWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DptpCoreSdkWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_initialize_orders(
    int port_,
    ffi.Pointer<wire_uint_8_list> asks,
    ffi.Pointer<wire_uint_8_list> bids,
  ) {
    return _wire_initialize_orders(
      port_,
      asks,
      bids,
    );
  }

  late final _wire_initialize_ordersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_initialize_orders');
  late final _wire_initialize_orders = _wire_initialize_ordersPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_pair_order_compute(
    int port_,
    ffi.Pointer<wire_uint_8_list> pair_symbol,
    ffi.Pointer<wire_uint_8_list> collateral_long_token,
    ffi.Pointer<wire_uint_8_list> collateral_short_token,
    ffi.Pointer<wire_uint_8_list> leverage,
    ffi.Pointer<wire_uint_8_list> max_notional,
    ffi.Pointer<wire_uint_8_list> min_quantity_base,
    ffi.Pointer<wire_uint_8_list> margin_ratio,
    ffi.Pointer<wire_uint_8_list> taker_fee,
    ffi.Pointer<wire_uint_8_list> maker_fee,
    int base_token_precision,
  ) {
    return _wire_new_pair_order_compute(
      port_,
      pair_symbol,
      collateral_long_token,
      collateral_short_token,
      leverage,
      max_notional,
      min_quantity_base,
      margin_ratio,
      taker_fee,
      maker_fee,
      base_token_precision,
    );
  }

  late final _wire_new_pair_order_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_new_pair_order_compute');
  late final _wire_new_pair_order_compute =
      _wire_new_pair_order_computePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int)>();

  void wire_change_leverage(
    int port_,
    ffi.Pointer<wire_uint_8_list> new_leverage,
    ffi.Pointer<wire_uint_8_list> max_notional,
  ) {
    return _wire_change_leverage(
      port_,
      new_leverage,
      max_notional,
    );
  }

  late final _wire_change_leveragePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_change_leverage');
  late final _wire_change_leverage = _wire_change_leveragePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_active_pair(
    int port_,
  ) {
    return _wire_get_active_pair(
      port_,
    );
  }

  late final _wire_get_active_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_active_pair');
  late final _wire_get_active_pair =
      _wire_get_active_pairPtr.asFunction<void Function(int)>();

  void wire_change_active_pair(
    int port_,
    ffi.Pointer<wire_uint_8_list> new_active_pair,
  ) {
    return _wire_change_active_pair(
      port_,
      new_active_pair,
    );
  }

  late final _wire_change_active_pairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_change_active_pair');
  late final _wire_change_active_pair = _wire_change_active_pairPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_check_pair_exists(
    int port_,
    ffi.Pointer<wire_uint_8_list> new_active_pair,
  ) {
    return _wire_check_pair_exists(
      port_,
      new_active_pair,
    );
  }

  late final _wire_check_pair_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_check_pair_exists');
  late final _wire_check_pair_exists = _wire_check_pair_existsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_update_balance(
    int port_,
    ffi.Pointer<wire_uint_8_list> token,
    ffi.Pointer<wire_uint_8_list> balance,
  ) {
    return _wire_update_balance(
      port_,
      token,
      balance,
    );
  }

  late final _wire_update_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_update_balance');
  late final _wire_update_balance = _wire_update_balancePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_compute_open_order(
    int port_,
    ffi.Pointer<wire_uint_8_list> pay_token,
    ffi.Pointer<wire_uint_8_list> pay_amount,
    ffi.Pointer<wire_uint_8_list> limit_price,
    ffi.Pointer<wire_uint_8_list> quantity,
    bool is_quote,
    bool is_buy,
    bool use_percentage,
  ) {
    return _wire_compute_open_order(
      port_,
      pay_token,
      pay_amount,
      limit_price,
      quantity,
      is_quote,
      is_buy,
      use_percentage,
    );
  }

  late final _wire_compute_open_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool)>>('wire_compute_open_order');
  late final _wire_compute_open_order = _wire_compute_open_orderPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool,
          bool,
          bool)>();

  void wire_get_order_book_manager(
    int port_,
  ) {
    return _wire_get_order_book_manager(
      port_,
    );
  }

  late final _wire_get_order_book_managerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_order_book_manager');
  late final _wire_get_order_book_manager =
      _wire_get_order_book_managerPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
